## Replace string pattern in all .def files in a directory
for f in *.def; do echo "processing " $f; awk '{sub("Author Olaitan","Author laitanawe@gmail.com")}1' $f > temp.txt && mv temp.txt $f; done

# Bash date formatting:
# Month in number (%m)
echo "processing finished on $(date +%a) $(date +'%Y-%m-%d %H:%M:%S')"

# Weekday in short (%a) and Month in short (%b)
echo "processing finished on $(date +%a) $(date +'%Y-%b-%d %H:%M:%S')"


#!/usr/bin/env bash
#Short runtime fastq -> fasta conversion: (from rtliu (https://www.biostars.org/u/6324/))
sed -n '1~4s/^@/>/p;2~4p' my.fastq > my.fasta

## First day of New Year 2022: Rename directories in present working directory from e.g. 01_jan20XX to 01_jan2022
for i in `ls`; do echo $i | sed 's/XX/22/' | xargs mv -fv $i ; done

## Beginning of New Year 2022: Replicate directories in Pictures: ../../template_NN_mon20XX/01mar/ into each working day in 2022
## Do this after you cd into a month e.g. assuming you're excluding January. $cd into 01_jan2022
## Then run this command
a=2; while [ $a -lt 13 ]; do if [ $a -gt 9 ]; then echo "../"$a && cd "../"$a*; else echo "../0"$a && cd "../0"$a*; fi; for i in $(ls); do echo "now copying into:"$i/ && cp -rv ../../template_NN_mon20XX/01mar/* $i; done; a=`expr $a + 1`; done

## List directories in pwd and echo directories that do not have the subdirectory named "output"
for t in `ls -d */`; do if ! [ -d $t/output ]; then echo $t; fi; done

## List directories in pwd and copy cancer_prostate/output to directories that do not have the subdirectory "output"
for t in `ls -d */`; do if ! [ -d $t/output ]; then cp -rv cancer_prostate/output $t; fi; done
## You can then manually do this:
cd each of those $t
git add *
git commit -am "Add new scripts" & git push

# Iteratively copy steps.txt into workflow dir for all Git Repos if steps.txt doesn't exist [ -e $file ]
for i in `ls`; do if ! [ -e $i/workflow/steps.txt ]; then echo $i; cp -v ~/Documents/steps.txt $i/workflow/; fi; done

# Iteratively copy project_lifecyle.txt into workflow dir for all Git Repos that are not ace2_covid
# If pwd is ace2_covid, then run this command (relative paths work)
for f in `ls ../`; do if [ $f != "ace2_covid" ]; then echo $f; cp -v workflow/project_lifecyle.txt ../$f/workflow; fi; done

## Here's my cheat sheet of conditional in bash:
"A ; B" Run A and then B, regardless of success of A (execute subsequent commands ONLY if B is true)
"A && B" Run B if A succeeded (execute subsequent commands ONLY if BOTH B and A are true)
"A || B" Run B if A failed (execute subsequent commands if ANY of B or A is true)
"A &" Run A in background. (execute command A as a backgroud process)
## To exclude cancer_prostate AND ALSO exclude spodoptera_temperature from the copy, do:
for d in `ls`; do if [ $d != 'cancer_prostate' ] && [ $d != 'spodoptera_temperature' ] ; then echo "Processing: "$d; cp -v spodoptera_temperature/docs/papers_url.txt $d/docs/; fi; done

## To exclude circrna_biomarker AND ALSO exclude gNBS_explore from the copy, do:
for d in `ls`; do if [ $d != 'circrna_biomarker' ] && [ $d != 'gNBS_explore' ]; then echo $d && cp -v circrna_biomarker/accessions/accessions.txt $d/accessions/; fi; done

## To exclude gNBS_explore strictly from the echo, do: (circrna_biomarker will be included in the echo)
for d in `ls`; do if [ $d != 'circrna_biomarker' ] ; [ $d != 'gNBS_explore' ]; then echo $d; echo "2nd "$d; fi; done

## To copy *.txt (steps and project_lifecycle) into $d, do: (ms_epigenomics will be excluded in the copy)
for d in `ls`; do if [ $d != 'ms_epigenomics' ]; then echo "Processing: " $d; cp -v ms_epigenomics/workflow/*.txt $d/workflow/; fi; done

## To delete project_lifecyle.txt from $d, do: (ms_epigenomics and circrna_biomarker will be strictly excluded in the copy)
for d in `ls`; do if [ $d != 'ms_epigenomics' ] && [ $d != 'circrna_biomarker' ] ; then echo "Removing project_lifecyle.txt from: " $d; rm -v $d/workflow/project_lifecyle.txt; fi; done


## To list git repos that needs updating, do: (ms_epigenomics and circrna_biomarker and spodoptera_temperature will be strictly excluded in the listing)
for d in `ls`; do if [ $d != 'ms_epigenomics' ] && [ $d != 'circrna_biomarker' ]  && [ $d != 'spodoptera_temperature' ]; then echo "Listing Git Repo to update: " $d; fi; done

# This has to be done manually because the repo contents vary. Copying .txt should be on a case by case basis.
cd ../{next_$d}
git add *; git commit -am "Add new scripts" & git push; git commit -am "Add new scripts" & git push; git status
next_$d

## To copy project_lifecycle.txt into $d, do: (ace2_covid will be excluded in the copy)
for d in `ls`; do if [ $d != 'ace2_covid' ]; then echo "Processing: " $d; cp -v ace2_covid/workflow/project_lifecycle.txt $d/workflow/; fi; done

## To copy notes.txt into $d, do: (ms_epigenomics will be excluded in the copy)
for d in `ls`; do if [ $d != 'ms_epigenomics' ]; then echo "Processing: " $d; cp -v ms_epigenomics/docs/notes.txt $d/docs/; fi; done

## Grab first num_accessions from sraruntable and write to output file
head -n $accessions_plus_header $input_file | tail -n $num_accessions | awk '{ print $1 }' > $output_file
## E.g.
head -n 201 sra_runtable.tsv | tail -n 200 | awk '{ print $1 }' > accessions.txt


# Generate new ssh key
ssh-keygen -t ed25519
# If you are using a legacy system that doesn't support the Ed25519 algorithm, use:
ssh-keygen -t rsa -b 4096 -C "your_email@example.com"

Steps:
1. Create VM
2. Add your personal public SSH keys
3. sudo adduser <username>
Lambert Nzungize
Step1:
# Adding a group, you can use project-name for group_name
sudo groupadd <group_name>

Step2:
# Adding a user (by hand, you can grab users from a text file of users)
sudo adduser <username>

# GitHub directory and ownership and permissions
sudo mkdir -pv ace2covid
sudo mkdir -pv github
sudo chown -Rv laitanawe:ace2covid github
sudo chmod -Rv 775 github

# Add multiple users to group, include your usernames in the users.txt file
sudo usermod -a -G mygroup userA userB userC
# Add my user and project users
for u in $(cat users2.txt); do sudo usermod -a -G ace2covid $u; done
for u in $(cat users.txt); do echo "processing: "$u; sudo usermod -a -G ace2covid $u; done


# Adding a user to different secondary groups
sudo usermod -a -G group1,group2 username

# Adding user linuxise to the sudo group
sudo usermod -a -G sudo linuxize

# Expand disks: Search for Manage Disks -> Open VM -> (3 dots) Edit -> Edit disk size.


# On instance:
sudo mkdir ~/my_shared_data_folder/prj_name
# Let group users save files in their project directory
sudo chmod -Rv 775 ~/my_shared_data_folder/prj_name
sudo chown -Rv $USER:prj-group ~/my_shared_data_folder/prj_name

# Filter out the US accessions
head -n 106 microbiome_data.csv | tail -n 105 | cut -f2 -d',' > accessions_usa_16s.txt

# Open each nextflow file in modules subdirectory
for i in $(ls modules/); do atom "modules/"$i; done

# copy directories into R package library directory
for d in $(sudo ls -Ahtr /usr/local/lib/R/old-site-library | tail -30); do sudo cp -Rv "/usr/local/lib/R/old-site-library/"$d "/usr/lib/R/library/"; done



#Make shell scripts to do things, and use bash -c to kick off the process with:
$ cat build_sandbox.sh
sudo SINGULARITY_TMPDIR=/path/to/tmp SINGULARITY_CACHEDIR=/path/to/cache SINGULARITY_LOCALCACHEDIR=/path/to/local_cache bash -c '/path/to/bin/singularity build --sandbox /path/to/name_for_sandbox /path/to/sandbox.def'

#Run the script by doing:
$ bash build_sandbox.sh
or if script is executable:
$./build_cutrun_sandbox.sh
